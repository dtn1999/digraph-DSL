/* generated from model GraphQLLite */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package graphqllite._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 abstract  public  class ASTSchemaTOP extends ASTCNode  implements graphqllite._ast.ASTGraphQLLiteNode {

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  java.util.List<graphqllite._ast.ASTGQLType> gQLTypes = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  Optional<graphqllite._symboltable.SchemaSymbol> symbol = Optional.empty();

    /* generated by template core.Attribute*/
 protected  graphqllite._symboltable.IGraphQLLiteScope spannedScope ;

    /* generated by template core.Attribute*/
 protected  graphqllite._symboltable.IGraphQLLiteScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTSchemaTOP()
 {
  /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)

 {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)

 {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTSchema comp;
    if ((o instanceof ASTSchema)) {
      comp = (ASTSchema) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing gQLTypes
    if (this.gQLTypes.size() != comp.gQLTypes.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<graphqllite._ast.ASTGQLType> it1 = this.gQLTypes.iterator();
        Iterator<graphqllite._ast.ASTGQLType> it2 = comp.gQLTypes.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<graphqllite._ast.ASTGQLType> it1 = this.gQLTypes.iterator();
        while (it1.hasNext()) {
          graphqllite._ast.ASTGQLType oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<graphqllite._ast.ASTGQLType> it2 = comp.gQLTypes.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)

 {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)

 {
      /* generated by template data.DeepEqualsWithComments*/

      ASTSchema comp;
    if ((o instanceof ASTSchema)) {
      comp = (ASTSchema) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing gQLTypes
    if (this.gQLTypes.size() != comp.gQLTypes.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<graphqllite._ast.ASTGQLType> it1 = this.gQLTypes.iterator();
        Iterator<graphqllite._ast.ASTGQLType> it2 = comp.gQLTypes.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<graphqllite._ast.ASTGQLType> it1 = this.gQLTypes.iterator();
        while (it1.hasNext()) {
          graphqllite._ast.ASTGQLType oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<graphqllite._ast.ASTGQLType> it2 = comp.gQLTypes.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)

 {
      /* generated by template data.EqualAttributes*/

      ASTSchema comp;
    if ((o instanceof ASTSchema)) {
      comp = (ASTSchema) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)

 {
      /* generated by template data.EqualsWithComments*/

      ASTSchema comp;
    if ((o instanceof ASTSchema)) {
      comp = (ASTSchema) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTSchema deepClone ()

 {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTSchema deepClone (ASTSchema result)

 {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

      result.setName(getName());
      getGQLTypeList().forEach(s -> result.gQLTypes.add(s.deepClone()));
    
    return result;

}

    /* generated by template core.Method*/
 public  String getName ()

 {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  boolean containsGQLType (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllGQLTypes (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<graphqllite._ast.ASTGQLType> iteratorGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().size();

}

    /* generated by template core.Method*/
 public  graphqllite._ast.ASTGQLType[] toArrayGQLTypes (graphqllite._ast.ASTGQLType[] array)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<graphqllite._ast.ASTGQLType> spliteratorGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<graphqllite._ast.ASTGQLType> streamGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().stream();

}

    /* generated by template core.Method*/
 public  Stream<graphqllite._ast.ASTGQLType> parallelStreamGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().parallelStream();

}

    /* generated by template core.Method*/
 public  graphqllite._ast.ASTGQLType getGQLType (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfGQLType (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfGQLType (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsGQLTypes (Object o)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<graphqllite._ast.ASTGQLType> listIteratorGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<graphqllite._ast.ASTGQLType> listIteratorGQLTypes (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<graphqllite._ast.ASTGQLType> subListGQLTypes (int start,int end)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<graphqllite._ast.ASTGQLType> getGQLTypeList ()

 {
      /* generated by template methods.Get*/

return this.gQLTypes;

}

    /* generated by template core.Method*/
 public  void setName (String name)

 {
      /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template core.Method*/
 public  void clearGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

this.getGQLTypeList().clear();

}

    /* generated by template core.Method*/
 public  boolean addGQLType (graphqllite._ast.ASTGQLType element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllGQLTypes (Collection<? extends graphqllite._ast.ASTGQLType> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeGQLType (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllGQLTypes (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllGQLTypes (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfGQLType (Predicate<? super graphqllite._ast.ASTGQLType> filter)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachGQLTypes (Consumer<? super graphqllite._ast.ASTGQLType> action)

 {
      /* generated by template methods.MethodDelegate*/

this.getGQLTypeList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addGQLType (int index,graphqllite._ast.ASTGQLType element)

 {
      /* generated by template methods.MethodDelegate*/

this.getGQLTypeList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllGQLTypes (int index,Collection<? extends graphqllite._ast.ASTGQLType> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  graphqllite._ast.ASTGQLType removeGQLType (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().remove(index);

}

    /* generated by template core.Method*/
 public  graphqllite._ast.ASTGQLType setGQLType (int index,graphqllite._ast.ASTGQLType element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllGQLTypes (UnaryOperator<graphqllite._ast.ASTGQLType> operator)

 {
      /* generated by template methods.MethodDelegate*/

this.getGQLTypeList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortGQLTypes (Comparator<? super graphqllite._ast.ASTGQLType> comparator)

 {
      /* generated by template methods.MethodDelegate*/

this.getGQLTypeList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setGQLTypeList (List<graphqllite._ast.ASTGQLType> gQLTypes)

 {
      /* generated by template methods.Set*/

this.gQLTypes = gQLTypes;

}

    /* generated by template core.Method*/
 public  void accept (graphqllite._visitor.GraphQLLiteTraverser visitor)

 {
      /* generated by template _ast.ast_class.Accept*/

    // We allow a down cast here, because the subclass ASTSchema must exist
    // and only this subclass may exist in the AST and hence, only this class may
    // be handled by a visitor. All other cases are invalid an throw an exception!
    // This decision was made during MC Sprint Review on 16.03.2015.
    if (this instanceof ASTSchema) {
      visitor.handle((ASTSchema) this);
    } else {
      throw new UnsupportedOperationException("0xA7011x61250 Only handwritten class ASTSchema is supported for the visitor");
    }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof graphqllite._visitor.GraphQLLiteTraverser) {
    accept((graphqllite._visitor.GraphQLLiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x31808 AST node type ASTSchema expected a visitor of type graphqllite._visitor.GraphQLLiteTraverser, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof graphqllite._visitor.GraphQLLiteTraverser) {
    accept((graphqllite._visitor.GraphQLLiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x50611 AST node type ASTSchema expected a visitor of type graphqllite._visitor.GraphQLLiteTraverser, but got de.monticore.mcbasics._visitor.MCBasicsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof graphqllite._visitor.GraphQLLiteTraverser) {
    accept((graphqllite._visitor.GraphQLLiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x73386 AST node type ASTSchema expected a visitor of type graphqllite._visitor.GraphQLLiteTraverser, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.visitor.ITraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof graphqllite._visitor.GraphQLLiteTraverser) {
    accept((graphqllite._visitor.GraphQLLiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x68711 AST node type ASTSchema expected a visitor of type graphqllite._visitor.GraphQLLiteTraverser, but got de.monticore.visitor.ITraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTSchema _construct ()

 {
      return graphqllite.GraphQLLiteMill.schemaBuilder().uncheckedBuild();
}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.SchemaSymbol getSymbol ()

 {
      /* generated by template methods.opt.Get4Opt*/

    if (isPresentSymbol()) {
        return this.symbol.get();
    }
    Log.error("0xA7003x61000 get for Symbol can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentSymbol ()

 {
      /* generated by template methods.opt.IsPresent4Opt*/

return this.symbol.isPresent();

}

    /* generated by template core.Method*/
 public  void setSymbol (graphqllite._symboltable.SchemaSymbol symbol)

 {
      /* generated by template methods.opt.Set4Opt*/

this.symbol = Optional.ofNullable(symbol);

}

    /* generated by template core.Method*/
 public  void setSymbolAbsent ()

 {
      /* generated by template methods.opt.SetAbsent*/

this.symbol = Optional.empty();

}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteScope getSpannedScope ()

 {
      /* generated by template methods.Get*/

return this.spannedScope;

}

    /* generated by template core.Method*/
 public  void setSpannedScope (graphqllite._symboltable.IGraphQLLiteScope spannedScope)

 {
      /* generated by template methods.Set*/

this.spannedScope = spannedScope;

}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteScope getEnclosingScope ()

 {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (graphqllite._symboltable.IGraphQLLiteScope enclosingScope)

 {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof graphqllite._symboltable.IGraphQLLiteScope){
    this.enclosingScope = (graphqllite._symboltable.IGraphQLLiteScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x11823 The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type graphqllite._symboltable.IGraphQLLiteScope. Please call the Method setEnclosingScope with a parameter form type graphqllite._symboltable.IGraphQLLiteScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof graphqllite._symboltable.IGraphQLLiteScope){
    this.enclosingScope = (graphqllite._symboltable.IGraphQLLiteScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x11824 The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type graphqllite._symboltable.IGraphQLLiteScope. Please call the Method setEnclosingScope with a parameter form type graphqllite._symboltable.IGraphQLLiteScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof graphqllite._symboltable.IGraphQLLiteScope){
    this.enclosingScope = (graphqllite._symboltable.IGraphQLLiteScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x11825 The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type graphqllite._symboltable.IGraphQLLiteScope. Please call the Method setEnclosingScope with a parameter form type graphqllite._symboltable.IGraphQLLiteScope");
  }
}

}
