/* generated from model GraphQLLite */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package graphqllite._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTSchemaBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSchemaBuilder>  {

    /* generated by template core.Attribute*/
 protected  ASTSchemaBuilder realBuilder ;

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  java.util.List<graphqllite._ast.ASTGQLType> gQLTypes = new java.util.ArrayList<>();


    /* generated by template core.Constructor*/
 public  ASTSchemaBuilder()
 {
  this.realBuilder = (ASTSchemaBuilder) this;
}


    /* generated by template core.Method*/
 public  ASTSchema build ()

 {
      /* generated by template _ast.builder.BuildMethod*/

        if (!isValid()) {
            if (name == null) {
                Log.error("0xA4522 name of type String must not be null");
            }
          throw new IllegalStateException();
        }
        ASTSchema value;
        /* generated by template _ast.ast_class.builder.ASTCNodeInit*/

    value = new ASTSchema();
    value.setName(this.name);
    value.setGQLTypeList(this.gQLTypes);
    if (this.sourcePositionEnd.isPresent()) {
      value.set_SourcePositionEnd(this.sourcePositionEnd.get());
    } else {
      value.set_SourcePositionEndAbsent();
    }
    if (this.sourcePositionStart.isPresent()) {
      value.set_SourcePositionStart(this.sourcePositionStart.get());
    } else {
      value.set_SourcePositionStartAbsent();
    }
    value.set_PreCommentList(this.precomments);
    value.set_PostCommentList(this.postcomments);

        return value;

}

    /* generated by template core.Method*/
 public  boolean isValid ()

 {
      /* generated by template _ast.builder.IsValidMethod*/

        if (name == null) {
            return false;
        }
        return true;

}

    /* generated by template core.Method*/
 public  String getName ()

 {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  boolean containsGQLType (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllGQLTypes (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<graphqllite._ast.ASTGQLType> iteratorGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().size();

}

    /* generated by template core.Method*/
 public  graphqllite._ast.ASTGQLType[] toArrayGQLTypes (graphqllite._ast.ASTGQLType[] array)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<graphqllite._ast.ASTGQLType> spliteratorGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<graphqllite._ast.ASTGQLType> streamGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().stream();

}

    /* generated by template core.Method*/
 public  Stream<graphqllite._ast.ASTGQLType> parallelStreamGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().parallelStream();

}

    /* generated by template core.Method*/
 public  graphqllite._ast.ASTGQLType getGQLType (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfGQLType (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfGQLType (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsGQLTypes (Object o)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<graphqllite._ast.ASTGQLType> listIteratorGQLTypes ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<graphqllite._ast.ASTGQLType> listIteratorGQLTypes (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<graphqllite._ast.ASTGQLType> subListGQLTypes (int start,int end)

 {
      /* generated by template methods.MethodDelegate*/

return this.getGQLTypeList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<graphqllite._ast.ASTGQLType> getGQLTypeList ()

 {
      /* generated by template methods.Get*/

return this.gQLTypes;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder setName (String name)

 {
      /* generated by template _ast.builder.Set4ASTBuilder*/

    this.name = name;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder clearGQLTypes ()

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().clear();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder addGQLType (graphqllite._ast.ASTGQLType element)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().add(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder addAllGQLTypes (Collection<? extends graphqllite._ast.ASTGQLType> collection)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().addAll(collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder removeGQLType (Object element)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().remove(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder removeAllGQLTypes (Collection<?> collection)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().removeAll(collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder retainAllGQLTypes (Collection<?> collection)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().retainAll(collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder removeIfGQLType (Predicate<? super graphqllite._ast.ASTGQLType> filter)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().removeIf(filter);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder forEachGQLTypes (Consumer<? super graphqllite._ast.ASTGQLType> action)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().forEach(action);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder addGQLType (int index,graphqllite._ast.ASTGQLType element)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().add(index, element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder addAllGQLTypes (int index,Collection<? extends graphqllite._ast.ASTGQLType> collection)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().addAll(index, collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder removeGQLType (int index)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().remove(index);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder setGQLType (int index,graphqllite._ast.ASTGQLType element)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().set(index, element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder replaceAllGQLTypes (UnaryOperator<graphqllite._ast.ASTGQLType> operator)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().replaceAll(operator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder sortGQLTypes (Comparator<? super graphqllite._ast.ASTGQLType> comparator)

 {
      /* generated by template _ast.builder.MethodDelegate4ASTBuilder*/

    this.getGQLTypeList().sort(comparator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder setGQLTypesList (List<graphqllite._ast.ASTGQLType> gQLTypes)

 {
      /* generated by template _ast.builder.Set4ASTBuilder*/

    this.gQLTypes = gQLTypes;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder set_SourcePositionEnd (SourcePosition end)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_SourcePositionEnd(end);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder set_SourcePositionEndAbsent ()

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_SourcePositionEndAbsent();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder set_SourcePositionStart (SourcePosition start)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_SourcePositionStart(start);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder set_SourcePositionStartAbsent ()

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_SourcePositionStartAbsent();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder clear_PreComments ()

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.clear_PreComments();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder add_PreComment (Comment precomment)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.add_PreComment(precomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder add_PreComment (int index,Comment precomment)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.add_PreComment(index, precomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder addAll_PreComments (Collection<Comment> precomments)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.addAll_PreComments(precomments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder addAll_PreComments (int index,Collection<Comment> precomments)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.addAll_PreComments(index, precomments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder remove_PreComment (Object element)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.remove_PreComment(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder remove_PreComment (int index)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.remove_PreComment(index);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder removeAll_PreComments (Collection<?> element)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.removeAll_PreComments(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder retainAll_PreComments (Collection<?> element)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.retainAll_PreComments(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder removeIf_PreComment (Predicate<? super Comment> filter)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.removeIf_PreComment(filter);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder forEach_PreComments (Consumer<? super Comment> action)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.forEach_PreComments(action);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder replaceAll_PreComments (UnaryOperator<Comment> operator)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.replaceAll_PreComments(operator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder sort_PreComments (Comparator<? super Comment> comparator)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.sort_PreComments(comparator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder set_PreCommentList (List<Comment> preComments)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_PreCommentList(preComments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder set_PreComment (int index,Comment precomment)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_PreComment(index, precomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder clear_PostComments ()

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.clear_PostComments();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder add_PostComment (Comment postcomment)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.add_PostComment(postcomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder add_PostComment (int index,Comment postcomment)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.add_PostComment(index, postcomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder addAll_PostComments (Collection<Comment> postcomments)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.addAll_PostComments(postcomments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder addAll_PostComments (int index,Collection<Comment> postcomments)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.addAll_PostComments(index, postcomments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder remove_PostComment (Object element)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.remove_PostComment(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder remove_PostComment (int index)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.remove_PostComment(index);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder removeAll_PostComments (Collection<?> element)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.removeAll_PostComments(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder retainAll_PostComments (Collection<?> element)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.retainAll_PostComments(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder removeIf_PostComment (Predicate<? super Comment> filter)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.removeIf_PostComment(filter);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder forEach_PostComments (Consumer<? super Comment> action)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.forEach_PostComments(action);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder replaceAll_PostComments (UnaryOperator<Comment> operator)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.replaceAll_PostComments(operator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder sort_PostComments (Comparator<? super Comment> comparator)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.sort_PostComments(comparator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder set_PostCommentList (List<Comment> postComments)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_PostCommentList(postComments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchemaBuilder set_PostComment (int index,Comment postcomment)

 {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_PostComment(index, postcomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTSchema uncheckedBuild ()

 {
      /* generated by template _ast.builder.BuildMethod*/

        ASTSchema value;
        /* generated by template _ast.ast_class.builder.ASTCNodeInit*/

    value = new ASTSchema();
    value.setName(this.name);
    value.setGQLTypeList(this.gQLTypes);
    if (this.sourcePositionEnd.isPresent()) {
      value.set_SourcePositionEnd(this.sourcePositionEnd.get());
    } else {
      value.set_SourcePositionEndAbsent();
    }
    if (this.sourcePositionStart.isPresent()) {
      value.set_SourcePositionStart(this.sourcePositionStart.get());
    } else {
      value.set_SourcePositionStartAbsent();
    }
    value.set_PreCommentList(this.precomments);
    value.set_PostCommentList(this.postcomments);

        return value;

}

}
