/* generated from model GraphQLLite */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package graphqllite._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTSimpleAttributeType extends ASTCNode  implements graphqllite._ast.ASTAttributeType,graphqllite._ast.ASTGraphQLLiteNode {

    /* generated by template core.Attribute*/
 protected  Optional<String> type = Optional.empty();

    /* generated by template core.Attribute*/
 protected  Optional<graphqllite._ast.ASTBUILDINSCALAR> buildInScalar = Optional.empty();

    /* generated by template core.Attribute*/
 protected  boolean required ;

    /* generated by template core.Attribute*/
 protected  graphqllite._symboltable.IGraphQLLiteScope enclosingScope ;

    /* generated by template core.Attribute*/
 protected  graphqllite._symboltable.GQLTypeSymbol typeSymbol ;


    /* generated by template core.Constructor*/
 protected  ASTSimpleAttributeType()
 {
  /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)

 {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)

 {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTSimpleAttributeType comp;
    if ((o instanceof ASTSimpleAttributeType)) {
      comp = (ASTSimpleAttributeType) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)

 {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)

 {
      /* generated by template data.DeepEqualsWithComments*/

      ASTSimpleAttributeType comp;
    if ((o instanceof ASTSimpleAttributeType)) {
      comp = (ASTSimpleAttributeType) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)

 {
      /* generated by template data.EqualAttributes*/

      ASTSimpleAttributeType comp;
    if ((o instanceof ASTSimpleAttributeType)) {
      comp = (ASTSimpleAttributeType) o;
    } else {
      return false;
    }
	// comparing type 
    if ( this.type.isPresent() != comp.type.isPresent() ||
       (this.type.isPresent() && !this.type.get().equals(comp.type.get())) ) {
      return false;
    }
	// comparing buildInScalar 
    if ( this.buildInScalar.isPresent() != comp.buildInScalar.isPresent() ||
       (this.buildInScalar.isPresent() && !this.buildInScalar.get().equals(comp.buildInScalar.get())) ) {
      return false;
    }
	// comparing required 
    if (!(this.required == comp.required)) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)

 {
      /* generated by template data.EqualsWithComments*/

      ASTSimpleAttributeType comp;
    if ((o instanceof ASTSimpleAttributeType)) {
      comp = (ASTSimpleAttributeType) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTSimpleAttributeType deepClone ()

 {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTSimpleAttributeType deepClone (ASTSimpleAttributeType result)

 {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

    if (isPresentType()){
      result.setType(getType());
    } else {
      result.setTypeAbsent();
    }
    if (isPresentBuildInScalar()){
      result.setBuildInScalar(getBuildInScalar());
    } else {
      result.setBuildInScalarAbsent();
    }
      result.setRequired(isRequired());
    
    return result;

}

    /* generated by template core.Method*/
 public  String getType ()

 {
      /* generated by template methods.opt.Get4Opt*/

    if (isPresentType()) {
        return this.type.get();
    }
    Log.error("0xA7003x62918 get for Type can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentType ()

 {
      /* generated by template methods.opt.IsPresent4Opt*/

return this.type.isPresent();

}

    /* generated by template core.Method*/
 public  graphqllite._ast.ASTBUILDINSCALAR getBuildInScalar ()

 {
      /* generated by template methods.opt.Get4Opt*/

    if (isPresentBuildInScalar()) {
        return this.buildInScalar.get();
    }
    Log.error("0xA7003x56986 get for BuildInScalar can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentBuildInScalar ()

 {
      /* generated by template methods.opt.IsPresent4Opt*/

return this.buildInScalar.isPresent();

}

    /* generated by template core.Method*/
 public  boolean isRequired ()

 {
      /* generated by template methods.Get*/

return this.required;

}

    /* generated by template core.Method*/
 public  void setType (String type)

 {
      /* generated by template methods.opt.Set4Opt*/

this.type = Optional.ofNullable(type);

}

    /* generated by template core.Method*/
 public  void setTypeAbsent ()

 {
      /* generated by template methods.opt.SetAbsent*/

this.type = Optional.empty();

}

    /* generated by template core.Method*/
 public  void setBuildInScalar (graphqllite._ast.ASTBUILDINSCALAR buildInScalar)

 {
      /* generated by template methods.opt.Set4Opt*/

this.buildInScalar = Optional.ofNullable(buildInScalar);

}

    /* generated by template core.Method*/
 public  void setBuildInScalarAbsent ()

 {
      /* generated by template methods.opt.SetAbsent*/

this.buildInScalar = Optional.empty();

}

    /* generated by template core.Method*/
 public  void setRequired (boolean required)

 {
      /* generated by template methods.Set*/

this.required = required;

}

    /* generated by template core.Method*/
 public  void accept (graphqllite._visitor.GraphQLLiteTraverser visitor)

 {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof graphqllite._visitor.GraphQLLiteTraverser) {
    accept((graphqllite._visitor.GraphQLLiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x96937 AST node type ASTSimpleAttributeType expected a visitor of type graphqllite._visitor.GraphQLLiteTraverser, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof graphqllite._visitor.GraphQLLiteTraverser) {
    accept((graphqllite._visitor.GraphQLLiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x27074 AST node type ASTSimpleAttributeType expected a visitor of type graphqllite._visitor.GraphQLLiteTraverser, but got de.monticore.mcbasics._visitor.MCBasicsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof graphqllite._visitor.GraphQLLiteTraverser) {
    accept((graphqllite._visitor.GraphQLLiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x32389 AST node type ASTSimpleAttributeType expected a visitor of type graphqllite._visitor.GraphQLLiteTraverser, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.visitor.ITraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof graphqllite._visitor.GraphQLLiteTraverser) {
    accept((graphqllite._visitor.GraphQLLiteTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x98442 AST node type ASTSimpleAttributeType expected a visitor of type graphqllite._visitor.GraphQLLiteTraverser, but got de.monticore.visitor.ITraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTSimpleAttributeType _construct ()

 {
      return graphqllite.GraphQLLiteMill.simpleAttributeTypeBuilder().uncheckedBuild();
}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteScope getEnclosingScope ()

 {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (graphqllite._symboltable.IGraphQLLiteScope enclosingScope)

 {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof graphqllite._symboltable.IGraphQLLiteScope){
    this.enclosingScope = (graphqllite._symboltable.IGraphQLLiteScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x09917 The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type graphqllite._symboltable.IGraphQLLiteScope. Please call the Method setEnclosingScope with a parameter form type graphqllite._symboltable.IGraphQLLiteScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof graphqllite._symboltable.IGraphQLLiteScope){
    this.enclosingScope = (graphqllite._symboltable.IGraphQLLiteScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x09916 The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type graphqllite._symboltable.IGraphQLLiteScope. Please call the Method setEnclosingScope with a parameter form type graphqllite._symboltable.IGraphQLLiteScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof graphqllite._symboltable.IGraphQLLiteScope){
    this.enclosingScope = (graphqllite._symboltable.IGraphQLLiteScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x09915 The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type graphqllite._symboltable.IGraphQLLiteScope. Please call the Method setEnclosingScope with a parameter form type graphqllite._symboltable.IGraphQLLiteScope");
  }
}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.GQLTypeSymbol getTypeSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.GetSymbol*/

  updateTypeSymbol();
  if (typeSymbol == null) {
    Log.error("0xA7303x43688 get for typeSymbol can't return a value. Attribute is empty.");
  }
  return typeSymbol   ;

}

    /* generated by template core.Method*/
 public  boolean isPresentTypeSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.IsPresentSymbol*/

     updateTypeSymbol();
     return typeSymbol != null;

}

    /* generated by template core.Method*/
 protected  void updateTypeSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.UpdateLoader*/

  if (isPresentType()) {
    if (getEnclosingScope() != null && (typeSymbol == null || !getType().equals(typeSymbol.getName()))) {
      typeSymbol = getEnclosingScope().resolveGQLType(getType()).orElse(null);
    }
  }

}

    /* generated by template core.Method*/
 public  graphqllite._ast.ASTGQLType getTypeDefinition ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.GetDefinition*/

    if (isPresentTypeDefinition()) {
        return getTypeSymbol().getAstNode();
    }
    Log.error("0xA7203x43397 typeDefinition can't return a value. It is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentTypeDefinition ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.IsPresentDefinition*/

    return isPresentTypeSymbol() && getTypeSymbol().isPresentAstNode();

}

}
