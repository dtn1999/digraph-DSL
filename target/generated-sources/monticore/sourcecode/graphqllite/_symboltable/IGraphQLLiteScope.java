/* generated from model GraphQLLite */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package graphqllite._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;


 public  interface IGraphQLLiteScope extends de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope  { 


  /* generated by template core.Method*/
 abstract  public  boolean isSchemaSymbolsAlreadyResolved ()

;
  /* generated by template core.Method*/
 abstract  public  void setSchemaSymbolsAlreadyResolved (boolean symbolAlreadyResolved)

;
  /* generated by template core.Method*/
 abstract  public  boolean isTypeSymbolsAlreadyResolved ()

;
  /* generated by template core.Method*/
 abstract  public  void setTypeSymbolsAlreadyResolved (boolean symbolAlreadyResolved)

;
  /* generated by template core.Method*/
 abstract  public  boolean isGQLTypeSymbolsAlreadyResolved ()

;
  /* generated by template core.Method*/
 abstract  public  void setGQLTypeSymbolsAlreadyResolved (boolean symbolAlreadyResolved)

;
  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.SchemaSymbol> resolveSchema (String name)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveSchemaMany(name ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.SchemaSymbol> resolveSchema (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveSchemaMany(name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.SchemaSymbol> resolveSchema (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveSchemaMany(name, modifier, predicate ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.SchemaSymbol> resolveSchema (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveSchemaMany(foundSymbols, name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.SchemaSymbol> resolveSchemaDown (String name)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveSchemaDownMany(name ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.SchemaSymbol> resolveSchemaDown (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveSchemaDownMany(name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.SchemaSymbol> resolveSchemaDown (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveSchemaDownMany(name, modifier, predicate ));
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaDownMany (String name)

 {
      return this.resolveSchemaDownMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaDownMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      return this.resolveSchemaDownMany(false,name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaDownMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      return this.resolveSchemaDownMany(false,name,modifier,predicate);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaDownMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveDownMany*/

  // skip resolution of the symbol, if the symbol has already been resolved in this scope instance
  // during the current execution of the resolution algorithm
  if (isSchemaSymbolsAlreadyResolved()) {
    return new ArrayList<>();
  }

  // (1) resolve symbol locally. During this, the 'already resolved' flag is set to true,
  // to prevent resolving cycles caused by cyclic symbol adapters
  setSchemaSymbolsAlreadyResolved(true);
  final List<graphqllite._symboltable.SchemaSymbol> resolvedSymbols = this.resolveSchemaLocallyMany(foundSymbols, name, modifier, predicate);
  foundSymbols = foundSymbols || resolvedSymbols.size() > 0;
  setSchemaSymbolsAlreadyResolved(false);

  final String resolveCall = "resolveDownMany(\"" + name + "\", \"" + "SchemaSymbol"
    + "\") in scope \"" + (isPresentName() ? getName() : "") + "\"";
  Log.trace("START " + resolveCall + ". Found #" + resolvedSymbols.size() + " (local)", "");
  // If no matching symbols have been found...
  if (resolvedSymbols.isEmpty()) {
    // (2) Continue search in sub scopes and ...
    for (graphqllite._symboltable.IGraphQLLiteScope subScope : getSubScopes()) {
      final List<graphqllite._symboltable.SchemaSymbol> resolvedFromSub = subScope
        .continueAsSchemaSubScope(foundSymbols, name, modifier, predicate);
      foundSymbols = foundSymbols || resolvedFromSub.size() > 0;
      // (3) unify results
      resolvedSymbols.addAll(resolvedFromSub);
    }
  }
  Log.trace("END " + resolveCall + ". Found #" + resolvedSymbols.size(), "");
  setSchemaSymbolsAlreadyResolved(false);
  return resolvedSymbols;
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.SchemaSymbol> resolveSchemaLocally (String name)

 {
       return getResolvedOrThrowException(this.resolveSchemaLocallyMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,x -> true));
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaLocallyMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveManyLocally*/

  final List<graphqllite._symboltable.SchemaSymbol> resolvedSymbols = new ArrayList<>();

  try {
    Optional<graphqllite._symboltable.SchemaSymbol> resolvedSymbol = filterSchema(name, getSchemaSymbols());
    if (resolvedSymbol.isPresent()) {
      resolvedSymbols.add(resolvedSymbol.get());
    }
  } catch (de.monticore.symboltable.resolving.ResolvedSeveralEntriesForSymbolException e) {
    resolvedSymbols.addAll(e.getSymbols());
  }

  // add all symbols of sub kinds of the current kind
  resolvedSymbols.addAll(resolveSchemaSubKinds(foundSymbols, name, modifier, predicate));

  // filter out symbols that are not included within the access modifier
  List<graphqllite._symboltable.SchemaSymbol> filteredSymbols = filterSymbolsByAccessModifier(modifier, resolvedSymbols);
  filteredSymbols = new ArrayList<>(filteredSymbols.stream().filter(predicate).collect(java.util.stream.Collectors.toList()));

  // if no symbols found try to find adapted one
  if (filteredSymbols.isEmpty()) {
    filteredSymbols.addAll(resolveAdaptedSchemaLocallyMany(foundSymbols, name, modifier, predicate));
    filteredSymbols = filterSymbolsByAccessModifier(modifier, filteredSymbols);
    filteredSymbols = new ArrayList<>(filteredSymbols.stream().filter(predicate).collect(java.util.stream.Collectors.toList()));
  }
  return filteredSymbols;
}

  /* generated by template core.Method*/
 abstract  public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaSubKinds (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

;
  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaMany (String name)

 {
      return this.resolveSchemaMany(name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      return this.resolveSchemaMany(name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      return this.resolveSchemaMany(false,name,modifier,predicate);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaMany (String name,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      return this.resolveSchemaMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,predicate);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      return this.resolveSchemaMany(foundSymbols,name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveSchemaMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveMany4IScope*/

  // skip resolution of the symbol, if the symbol has already been resolved in this scope instance
  // during the current execution of the resolution algorithm
  if (isSchemaSymbolsAlreadyResolved()) {
    return new ArrayList<>();
  }

  // (1) resolve symbol locally. During this, the 'already resolved' flag is set to true,
  // to prevent resolving cycles caused by cyclic symbol adapters
  setSchemaSymbolsAlreadyResolved(true);
  final List<graphqllite._symboltable.SchemaSymbol> resolvedSymbols = this.resolveSchemaLocallyMany(foundSymbols, name, modifier, predicate);
  foundSymbols = foundSymbols | resolvedSymbols.size() > 0;
  setSchemaSymbolsAlreadyResolved(false);

  final String resolveCall = "resolveMany(\"" + name + "\", \"" + "SchemaSymbol"
  + "\") in scope \"" + (isPresentName() ? getName() : "") + "\"";
  Log.trace("START " + resolveCall + ". Found #" + resolvedSymbols.size() + " (local)", "");

  // (2) continue with enclosingScope, if either no symbol has been found yet or this scope is non-shadowing
  final List<graphqllite._symboltable.SchemaSymbol> resolvedFromEnclosing = continueSchemaWithEnclosingScope(foundSymbols, name, modifier, predicate);

  // (3) unify results
  resolvedSymbols.addAll(resolvedFromEnclosing);
  Log.trace("END " + resolveCall + ". Found #" + resolvedSymbols.size(), "");

  return resolvedSymbols;
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> resolveAdaptedSchemaLocallyMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      return new java.util.ArrayList<>();
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.SchemaSymbol> filterSchema (String name,com.google.common.collect.LinkedListMultimap<String,graphqllite._symboltable.SchemaSymbol> symbols)

 {
      /* generated by template _symboltable.iscope.Filter*/

  final Set<graphqllite._symboltable.SchemaSymbol> resolvedSymbols = new LinkedHashSet<>();

  final String simpleName = de.se_rwth.commons.Names.getSimpleName(name);

  if (symbols.containsKey(simpleName)) {
    for (graphqllite._symboltable.SchemaSymbol symbol : symbols.get(simpleName)) {
      if (symbol.getName().equals(name) || symbol.getFullName().equals(name)) {
        resolvedSymbols.add(symbol);
      }
    }
  }

  return getResolvedOrThrowException(resolvedSymbols);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> continueSchemaWithEnclosingScope (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ContinueWithEnclosingScope4IScope*/

if (checkIfContinueWithEnclosingScope(foundSymbols) && (getEnclosingScope() != null)) {
    return getEnclosingScope().resolveSchemaMany(foundSymbols, name, modifier, predicate);
  }
  return new ArrayList<>();
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> continueAsSchemaSubScope (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.SchemaSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ContinueAsSubScope*/

  List<SchemaSymbol> resultList = new ArrayList<>();
  setSchemaSymbolsAlreadyResolved(false);
  if (checkIfContinueAsSubScope(name)) {
    for(String remainingSymbolName: getRemainingNameForResolveDown(name)) {
      resultList.addAll(this.resolveSchemaDownMany(foundSymbols, remainingSymbolName, modifier, predicate));
    }
  }
  return resultList;
}

  /* generated by template core.Method*/
 abstract  public  com.google.common.collect.LinkedListMultimap<String,graphqllite._symboltable.SchemaSymbol> getSchemaSymbols ()

;
  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.SchemaSymbol> getLocalSchemaSymbols ()

 {
      return getSchemaSymbols().values();
}

  /* generated by template core.Method*/
 abstract  public  void add (graphqllite._symboltable.SchemaSymbol symbol)

;
  /* generated by template core.Method*/
 abstract  public  void remove (graphqllite._symboltable.SchemaSymbol symbol)

;
  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.TypeSymbol> resolveType (String name)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveTypeMany(name ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.TypeSymbol> resolveType (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveTypeMany(name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.TypeSymbol> resolveType (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveTypeMany(name, modifier, predicate ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.TypeSymbol> resolveType (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveTypeMany(foundSymbols, name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.TypeSymbol> resolveTypeDown (String name)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveTypeDownMany(name ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.TypeSymbol> resolveTypeDown (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveTypeDownMany(name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.TypeSymbol> resolveTypeDown (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveTypeDownMany(name, modifier, predicate ));
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeDownMany (String name)

 {
      return this.resolveTypeDownMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeDownMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      return this.resolveTypeDownMany(false,name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeDownMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      return this.resolveTypeDownMany(false,name,modifier,predicate);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeDownMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveDownMany*/

  // skip resolution of the symbol, if the symbol has already been resolved in this scope instance
  // during the current execution of the resolution algorithm
  if (isTypeSymbolsAlreadyResolved()) {
    return new ArrayList<>();
  }

  // (1) resolve symbol locally. During this, the 'already resolved' flag is set to true,
  // to prevent resolving cycles caused by cyclic symbol adapters
  setTypeSymbolsAlreadyResolved(true);
  final List<graphqllite._symboltable.TypeSymbol> resolvedSymbols = this.resolveTypeLocallyMany(foundSymbols, name, modifier, predicate);
  foundSymbols = foundSymbols || resolvedSymbols.size() > 0;
  setTypeSymbolsAlreadyResolved(false);

  final String resolveCall = "resolveDownMany(\"" + name + "\", \"" + "TypeSymbol"
    + "\") in scope \"" + (isPresentName() ? getName() : "") + "\"";
  Log.trace("START " + resolveCall + ". Found #" + resolvedSymbols.size() + " (local)", "");
  // If no matching symbols have been found...
  if (resolvedSymbols.isEmpty()) {
    // (2) Continue search in sub scopes and ...
    for (graphqllite._symboltable.IGraphQLLiteScope subScope : getSubScopes()) {
      final List<graphqllite._symboltable.TypeSymbol> resolvedFromSub = subScope
        .continueAsTypeSubScope(foundSymbols, name, modifier, predicate);
      foundSymbols = foundSymbols || resolvedFromSub.size() > 0;
      // (3) unify results
      resolvedSymbols.addAll(resolvedFromSub);
    }
  }
  Log.trace("END " + resolveCall + ". Found #" + resolvedSymbols.size(), "");
  setTypeSymbolsAlreadyResolved(false);
  return resolvedSymbols;
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.TypeSymbol> resolveTypeLocally (String name)

 {
       return getResolvedOrThrowException(this.resolveTypeLocallyMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,x -> true));
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeLocallyMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveManyLocally*/

  final List<graphqllite._symboltable.TypeSymbol> resolvedSymbols = new ArrayList<>();

  try {
    Optional<graphqllite._symboltable.TypeSymbol> resolvedSymbol = filterType(name, getTypeSymbols());
    if (resolvedSymbol.isPresent()) {
      resolvedSymbols.add(resolvedSymbol.get());
    }
  } catch (de.monticore.symboltable.resolving.ResolvedSeveralEntriesForSymbolException e) {
    resolvedSymbols.addAll(e.getSymbols());
  }

  // add all symbols of sub kinds of the current kind
  resolvedSymbols.addAll(resolveTypeSubKinds(foundSymbols, name, modifier, predicate));

  // filter out symbols that are not included within the access modifier
  List<graphqllite._symboltable.TypeSymbol> filteredSymbols = filterSymbolsByAccessModifier(modifier, resolvedSymbols);
  filteredSymbols = new ArrayList<>(filteredSymbols.stream().filter(predicate).collect(java.util.stream.Collectors.toList()));

  // if no symbols found try to find adapted one
  if (filteredSymbols.isEmpty()) {
    filteredSymbols.addAll(resolveAdaptedTypeLocallyMany(foundSymbols, name, modifier, predicate));
    filteredSymbols = filterSymbolsByAccessModifier(modifier, filteredSymbols);
    filteredSymbols = new ArrayList<>(filteredSymbols.stream().filter(predicate).collect(java.util.stream.Collectors.toList()));
  }
  return filteredSymbols;
}

  /* generated by template core.Method*/
 abstract  public  List<graphqllite._symboltable.TypeSymbol> resolveTypeSubKinds (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

;
  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeMany (String name)

 {
      return this.resolveTypeMany(name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      return this.resolveTypeMany(name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      return this.resolveTypeMany(false,name,modifier,predicate);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeMany (String name,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      return this.resolveTypeMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,predicate);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      return this.resolveTypeMany(foundSymbols,name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveTypeMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveMany4IScope*/

  // skip resolution of the symbol, if the symbol has already been resolved in this scope instance
  // during the current execution of the resolution algorithm
  if (isTypeSymbolsAlreadyResolved()) {
    return new ArrayList<>();
  }

  // (1) resolve symbol locally. During this, the 'already resolved' flag is set to true,
  // to prevent resolving cycles caused by cyclic symbol adapters
  setTypeSymbolsAlreadyResolved(true);
  final List<graphqllite._symboltable.TypeSymbol> resolvedSymbols = this.resolveTypeLocallyMany(foundSymbols, name, modifier, predicate);
  foundSymbols = foundSymbols | resolvedSymbols.size() > 0;
  setTypeSymbolsAlreadyResolved(false);

  final String resolveCall = "resolveMany(\"" + name + "\", \"" + "TypeSymbol"
  + "\") in scope \"" + (isPresentName() ? getName() : "") + "\"";
  Log.trace("START " + resolveCall + ". Found #" + resolvedSymbols.size() + " (local)", "");

  // (2) continue with enclosingScope, if either no symbol has been found yet or this scope is non-shadowing
  final List<graphqllite._symboltable.TypeSymbol> resolvedFromEnclosing = continueTypeWithEnclosingScope(foundSymbols, name, modifier, predicate);

  // (3) unify results
  resolvedSymbols.addAll(resolvedFromEnclosing);
  Log.trace("END " + resolveCall + ". Found #" + resolvedSymbols.size(), "");

  return resolvedSymbols;
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> resolveAdaptedTypeLocallyMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      return new java.util.ArrayList<>();
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.TypeSymbol> filterType (String name,com.google.common.collect.LinkedListMultimap<String,graphqllite._symboltable.TypeSymbol> symbols)

 {
      /* generated by template _symboltable.iscope.Filter*/

  final Set<graphqllite._symboltable.TypeSymbol> resolvedSymbols = new LinkedHashSet<>();

  final String simpleName = de.se_rwth.commons.Names.getSimpleName(name);

  if (symbols.containsKey(simpleName)) {
    for (graphqllite._symboltable.TypeSymbol symbol : symbols.get(simpleName)) {
      if (symbol.getName().equals(name) || symbol.getFullName().equals(name)) {
        resolvedSymbols.add(symbol);
      }
    }
  }

  return getResolvedOrThrowException(resolvedSymbols);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> continueTypeWithEnclosingScope (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ContinueWithEnclosingScope4IScope*/

if (checkIfContinueWithEnclosingScope(foundSymbols) && (getEnclosingScope() != null)) {
    return getEnclosingScope().resolveTypeMany(foundSymbols, name, modifier, predicate);
  }
  return new ArrayList<>();
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> continueAsTypeSubScope (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.TypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ContinueAsSubScope*/

  List<TypeSymbol> resultList = new ArrayList<>();
  setTypeSymbolsAlreadyResolved(false);
  if (checkIfContinueAsSubScope(name)) {
    for(String remainingSymbolName: getRemainingNameForResolveDown(name)) {
      resultList.addAll(this.resolveTypeDownMany(foundSymbols, remainingSymbolName, modifier, predicate));
    }
  }
  return resultList;
}

  /* generated by template core.Method*/
 abstract  public  com.google.common.collect.LinkedListMultimap<String,graphqllite._symboltable.TypeSymbol> getTypeSymbols ()

;
  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.TypeSymbol> getLocalTypeSymbols ()

 {
      return getTypeSymbols().values();
}

  /* generated by template core.Method*/
 abstract  public  void add (graphqllite._symboltable.TypeSymbol symbol)

;
  /* generated by template core.Method*/
 abstract  public  void remove (graphqllite._symboltable.TypeSymbol symbol)

;
  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.GQLTypeSymbol> resolveGQLType (String name)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveGQLTypeMany(name ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.GQLTypeSymbol> resolveGQLType (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveGQLTypeMany(name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.GQLTypeSymbol> resolveGQLType (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveGQLTypeMany(name, modifier, predicate ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.GQLTypeSymbol> resolveGQLType (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveGQLTypeMany(foundSymbols, name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeDown (String name)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveGQLTypeDownMany(name ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeDown (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveGQLTypeDownMany(name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeDown (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveGQLTypeDownMany(name, modifier, predicate ));
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeDownMany (String name)

 {
      return this.resolveGQLTypeDownMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeDownMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      return this.resolveGQLTypeDownMany(false,name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeDownMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      return this.resolveGQLTypeDownMany(false,name,modifier,predicate);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeDownMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveDownMany*/

  // skip resolution of the symbol, if the symbol has already been resolved in this scope instance
  // during the current execution of the resolution algorithm
  if (isGQLTypeSymbolsAlreadyResolved()) {
    return new ArrayList<>();
  }

  // (1) resolve symbol locally. During this, the 'already resolved' flag is set to true,
  // to prevent resolving cycles caused by cyclic symbol adapters
  setGQLTypeSymbolsAlreadyResolved(true);
  final List<graphqllite._symboltable.GQLTypeSymbol> resolvedSymbols = this.resolveGQLTypeLocallyMany(foundSymbols, name, modifier, predicate);
  foundSymbols = foundSymbols || resolvedSymbols.size() > 0;
  setGQLTypeSymbolsAlreadyResolved(false);

  final String resolveCall = "resolveDownMany(\"" + name + "\", \"" + "GQLTypeSymbol"
    + "\") in scope \"" + (isPresentName() ? getName() : "") + "\"";
  Log.trace("START " + resolveCall + ". Found #" + resolvedSymbols.size() + " (local)", "");
  // If no matching symbols have been found...
  if (resolvedSymbols.isEmpty()) {
    // (2) Continue search in sub scopes and ...
    for (graphqllite._symboltable.IGraphQLLiteScope subScope : getSubScopes()) {
      final List<graphqllite._symboltable.GQLTypeSymbol> resolvedFromSub = subScope
        .continueAsGQLTypeSubScope(foundSymbols, name, modifier, predicate);
      foundSymbols = foundSymbols || resolvedFromSub.size() > 0;
      // (3) unify results
      resolvedSymbols.addAll(resolvedFromSub);
    }
  }
  Log.trace("END " + resolveCall + ". Found #" + resolvedSymbols.size(), "");
  setGQLTypeSymbolsAlreadyResolved(false);
  return resolvedSymbols;
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeLocally (String name)

 {
       return getResolvedOrThrowException(this.resolveGQLTypeLocallyMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,x -> true));
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeLocallyMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveManyLocally*/

  final List<graphqllite._symboltable.GQLTypeSymbol> resolvedSymbols = new ArrayList<>();

  try {
    Optional<graphqllite._symboltable.GQLTypeSymbol> resolvedSymbol = filterGQLType(name, getGQLTypeSymbols());
    if (resolvedSymbol.isPresent()) {
      resolvedSymbols.add(resolvedSymbol.get());
    }
  } catch (de.monticore.symboltable.resolving.ResolvedSeveralEntriesForSymbolException e) {
    resolvedSymbols.addAll(e.getSymbols());
  }

  // add all symbols of sub kinds of the current kind
  resolvedSymbols.addAll(resolveGQLTypeSubKinds(foundSymbols, name, modifier, predicate));

  // filter out symbols that are not included within the access modifier
  List<graphqllite._symboltable.GQLTypeSymbol> filteredSymbols = filterSymbolsByAccessModifier(modifier, resolvedSymbols);
  filteredSymbols = new ArrayList<>(filteredSymbols.stream().filter(predicate).collect(java.util.stream.Collectors.toList()));

  // if no symbols found try to find adapted one
  if (filteredSymbols.isEmpty()) {
    filteredSymbols.addAll(resolveAdaptedGQLTypeLocallyMany(foundSymbols, name, modifier, predicate));
    filteredSymbols = filterSymbolsByAccessModifier(modifier, filteredSymbols);
    filteredSymbols = new ArrayList<>(filteredSymbols.stream().filter(predicate).collect(java.util.stream.Collectors.toList()));
  }
  return filteredSymbols;
}

  /* generated by template core.Method*/
 abstract  public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeSubKinds (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

;
  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeMany (String name)

 {
      return this.resolveGQLTypeMany(name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      return this.resolveGQLTypeMany(name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      return this.resolveGQLTypeMany(false,name,modifier,predicate);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeMany (String name,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      return this.resolveGQLTypeMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,predicate);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier)

 {
      return this.resolveGQLTypeMany(foundSymbols,name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveGQLTypeMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ResolveMany4IScope*/

  // skip resolution of the symbol, if the symbol has already been resolved in this scope instance
  // during the current execution of the resolution algorithm
  if (isGQLTypeSymbolsAlreadyResolved()) {
    return new ArrayList<>();
  }

  // (1) resolve symbol locally. During this, the 'already resolved' flag is set to true,
  // to prevent resolving cycles caused by cyclic symbol adapters
  setGQLTypeSymbolsAlreadyResolved(true);
  final List<graphqllite._symboltable.GQLTypeSymbol> resolvedSymbols = this.resolveGQLTypeLocallyMany(foundSymbols, name, modifier, predicate);
  foundSymbols = foundSymbols | resolvedSymbols.size() > 0;
  setGQLTypeSymbolsAlreadyResolved(false);

  final String resolveCall = "resolveMany(\"" + name + "\", \"" + "GQLTypeSymbol"
  + "\") in scope \"" + (isPresentName() ? getName() : "") + "\"";
  Log.trace("START " + resolveCall + ". Found #" + resolvedSymbols.size() + " (local)", "");

  // (2) continue with enclosingScope, if either no symbol has been found yet or this scope is non-shadowing
  final List<graphqllite._symboltable.GQLTypeSymbol> resolvedFromEnclosing = continueGQLTypeWithEnclosingScope(foundSymbols, name, modifier, predicate);

  // (3) unify results
  resolvedSymbols.addAll(resolvedFromEnclosing);
  Log.trace("END " + resolveCall + ". Found #" + resolvedSymbols.size(), "");

  return resolvedSymbols;
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> resolveAdaptedGQLTypeLocallyMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      return new java.util.ArrayList<>();
}

  default /* generated by template core.Method*/
 public  Optional<graphqllite._symboltable.GQLTypeSymbol> filterGQLType (String name,com.google.common.collect.LinkedListMultimap<String,graphqllite._symboltable.GQLTypeSymbol> symbols)

 {
      /* generated by template _symboltable.iscope.Filter*/

  final Set<graphqllite._symboltable.GQLTypeSymbol> resolvedSymbols = new LinkedHashSet<>();

  final String simpleName = de.se_rwth.commons.Names.getSimpleName(name);

  if (symbols.containsKey(simpleName)) {
    for (graphqllite._symboltable.GQLTypeSymbol symbol : symbols.get(simpleName)) {
      if (symbol.getName().equals(name) || symbol.getFullName().equals(name)) {
        resolvedSymbols.add(symbol);
      }
    }
  }

  return getResolvedOrThrowException(resolvedSymbols);
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> continueGQLTypeWithEnclosingScope (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ContinueWithEnclosingScope4IScope*/

if (checkIfContinueWithEnclosingScope(foundSymbols) && (getEnclosingScope() != null)) {
    return getEnclosingScope().resolveGQLTypeMany(foundSymbols, name, modifier, predicate);
  }
  return new ArrayList<>();
}

  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> continueAsGQLTypeSubScope (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<graphqllite._symboltable.GQLTypeSymbol> predicate)

 {
      /* generated by template _symboltable.iscope.ContinueAsSubScope*/

  List<GQLTypeSymbol> resultList = new ArrayList<>();
  setGQLTypeSymbolsAlreadyResolved(false);
  if (checkIfContinueAsSubScope(name)) {
    for(String remainingSymbolName: getRemainingNameForResolveDown(name)) {
      resultList.addAll(this.resolveGQLTypeDownMany(foundSymbols, remainingSymbolName, modifier, predicate));
    }
  }
  return resultList;
}

  /* generated by template core.Method*/
 abstract  public  com.google.common.collect.LinkedListMultimap<String,graphqllite._symboltable.GQLTypeSymbol> getGQLTypeSymbols ()

;
  default /* generated by template core.Method*/
 public  List<graphqllite._symboltable.GQLTypeSymbol> getLocalGQLTypeSymbols ()

 {
      return getGQLTypeSymbols().values();
}

  /* generated by template core.Method*/
 abstract  public  void add (graphqllite._symboltable.GQLTypeSymbol symbol)

;
  /* generated by template core.Method*/
 abstract  public  void remove (graphqllite._symboltable.GQLTypeSymbol symbol)

;
  /* generated by template core.Method*/
 abstract  public  List<? extends IGraphQLLiteScope> getSubScopes ()

;
  default /* generated by template core.Method*/
 public  void addSubScope (IGraphQLLiteScope subScope)

 {
      Log.error("0xA7014x90469 The method \"addSubScope\" of interface \"IGraphQLLiteScope\" is not implemented.");
}

  default /* generated by template core.Method*/
 public  void removeSubScope (IGraphQLLiteScope subScope)

 {
      Log.error("0xA7013x63417 The method \"removeSubScope\" of interface \"IGraphQLLiteScope\" is not implemented.");
}

  /* generated by template core.Method*/
 abstract  public  IGraphQLLiteScope getEnclosingScope ()

;
  /* generated by template core.Method*/
 abstract  public  void setEnclosingScope (IGraphQLLiteScope enclosingScope)

;
  /* generated by template core.Method*/
 abstract  public  void accept (graphqllite._visitor.GraphQLLiteTraverser visitor)

;
  default /* generated by template core.Method*/
 public  int getSymbolsSize ()

 {
      /* generated by template _symboltable.iscope.GetSymbolSize*/


Set<ISymbol> allSymbols = new HashSet<>();
    allSymbols.addAll(getGQLTypeSymbols().values());
    allSymbols.addAll(getTypeSymbols().values());
    allSymbols.addAll(getSchemaSymbols().values());
return allSymbols.size();
}

}
