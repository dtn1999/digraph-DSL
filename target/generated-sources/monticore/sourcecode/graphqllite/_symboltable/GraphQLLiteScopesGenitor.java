/* generated from model GraphQLLite */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package graphqllite._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class GraphQLLiteScopesGenitor  implements graphqllite._visitor.GraphQLLiteVisitor2,graphqllite._visitor.GraphQLLiteHandler {

    /* generated by template core.Attribute*/
 protected  Deque<graphqllite._symboltable.IGraphQLLiteScope> scopeStack = new java.util.ArrayDeque<>();

    /* generated by template core.Attribute*/
 protected  graphqllite._visitor.GraphQLLiteTraverser traverser ;

    /* generated by template core.Attribute*/
 protected  graphqllite._symboltable.IGraphQLLiteScope firstCreatedScope ;


    /* generated by template core.Constructor*/
 public  GraphQLLiteScopesGenitor()
 {
  this.scopeStack = new ArrayDeque<>();
}


    /* generated by template core.Method*/
 public  graphqllite._visitor.GraphQLLiteTraverser getTraverser ()

 {
      /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template core.Method*/
 public  void setTraverser (graphqllite._visitor.GraphQLLiteTraverser traverser)

 {
      /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteScope getFirstCreatedScope ()

 {
      /* generated by template methods.Get*/

return this.firstCreatedScope;

}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteArtifactScope createFromAST (graphqllite._ast.ASTSchema rootNode)

 {
      /* generated by template _symboltable.scopesgenitor.CreateFromAST*/

  Log.errorIfNull(rootNode, "0xA7004x23687 Error by creating of the GraphQLLiteScopesGenitor symbol table: top ast node is null");
  IGraphQLLiteArtifactScope artifactScope = graphqllite.GraphQLLiteMill.artifactScope();
  artifactScope.setPackageName("");
  artifactScope.setImportsList(new ArrayList<>());
  artifactScope.setAstNode(rootNode);
  putOnStack(artifactScope);
  initArtifactScopeHP1(artifactScope);
  rootNode.accept(getTraverser());
  initArtifactScopeHP2(artifactScope);
  return artifactScope;
}

    /* generated by template core.Method*/
 public  void putOnStack (graphqllite._symboltable.IGraphQLLiteScope scope)

 {
      /* generated by template _symboltable.scopesgenitor.PutOnStack*/
  Log.errorIfNull(scope);

if (scope.getEnclosingScope() == null && getCurrentScope().isPresent()) {
    scope.setEnclosingScope(getCurrentScope().get());
    getCurrentScope().get().addSubScope(scope);
} else if (scope.getEnclosingScope() != null && getCurrentScope().isPresent()) {
    if (scope.getEnclosingScope() != getCurrentScope().get()) {
      Log.warn("0xA1043 The enclosing scope is not the same as the current scope on the stack.");
    }
  }

  if (firstCreatedScope == null) {
    firstCreatedScope = scope;
  }

  scopeStack.addLast(scope);
}

    /* generated by template core.Method*/
 public  final  Optional<graphqllite._symboltable.IGraphQLLiteScope> getCurrentScope ()

 {
      return Optional.ofNullable(scopeStack.peekLast());
}

    /* generated by template core.Method*/
 public  final  Optional<graphqllite._symboltable.IGraphQLLiteScope> removeCurrentScope ()

 {
      return Optional.ofNullable(scopeStack.pollLast());
}

    /* generated by template core.Method*/
 public  void setScopeStack (Deque<? extends graphqllite._symboltable.IGraphQLLiteScope> scopeStack)

 {
      this.scopeStack = Log.errorIfNull((Deque<graphqllite._symboltable.IGraphQLLiteScope>)scopeStack);
}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteScope createScope (boolean shadowing)

 {
      /* generated by template _symboltable.scopesgenitor.CreateScope*/

  graphqllite._symboltable.IGraphQLLiteScope scope = graphqllite.GraphQLLiteMill.scope();
  scope.setShadowing(shadowing);
  return scope;
}

    /* generated by template core.Method*/
 public  void visit (graphqllite._ast.ASTSchema node)

 {
      /* generated by template _symboltable.scopesgenitor.Visit4SSC*/

  graphqllite._symboltable.SchemaSymbol symbol = graphqllite.GraphQLLiteMill.schemaSymbolBuilder().setName(node.getName()).build();
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA5021x92967 Symbol cannot be added to current scope, since no scope exists.");
  }
  graphqllite._symboltable.IGraphQLLiteScope scope = createScope(false);
  putOnStack(scope);
  symbol.setSpannedScope(scope);
  // symbol -> ast
  symbol.setAstNode(node);

  // ast -> symbol
  node.setSymbol(symbol);
  node.setEnclosingScope(symbol.getEnclosingScope());

  // scope -> ast
  scope.setAstNode(node);

  // ast -> scope
  node.setSpannedScope(scope);
  initScopeHP1(scope);
  initSchemaHP1(node.getSymbol());

}

    /* generated by template core.Method*/
 public  void endVisit (graphqllite._ast.ASTSchema node)

 {
      /* generated by template _symboltable.scopesgenitor.EndVisitSymbol*/

  removeCurrentScope();
  initScopeHP2(node.getSpannedScope());
  if(node.isPresentSymbol()){
    initSchemaHP2(node.getSymbol());
  }
}

    /* generated by template core.Method*/
 public  void visit (graphqllite._ast.ASTType node)

 {
      /* generated by template _symboltable.scopesgenitor.Visit4SSC*/

  graphqllite._symboltable.TypeSymbol symbol = graphqllite.GraphQLLiteMill.typeSymbolBuilder().setName(node.getName()).build();
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA5021x54337 Symbol cannot be added to current scope, since no scope exists.");
  }
  graphqllite._symboltable.IGraphQLLiteScope scope = createScope(false);
  putOnStack(scope);
  symbol.setSpannedScope(scope);
  // symbol -> ast
  symbol.setAstNode(node);

  // ast -> symbol
  node.setSymbol(symbol);
  node.setEnclosingScope(symbol.getEnclosingScope());

  // scope -> ast
  scope.setAstNode(node);

  // ast -> scope
  node.setSpannedScope(scope);
  initScopeHP1(scope);
  initTypeHP1(node.getSymbol());

}

    /* generated by template core.Method*/
 public  void endVisit (graphqllite._ast.ASTType node)

 {
      /* generated by template _symboltable.scopesgenitor.EndVisitSymbol*/

  removeCurrentScope();
  initScopeHP2(node.getSpannedScope());
  if(node.isPresentSymbol()){
    initTypeHP2(node.getSymbol());
  }
}

    /* generated by template core.Method*/
 public  void visit (graphqllite._ast.ASTScalar node)

 {
      /* generated by template _symboltable.scopesgenitor.Visit4SSC*/

  graphqllite._symboltable.GQLTypeSymbol symbol = graphqllite.GraphQLLiteMill.gQLTypeSymbolBuilder().setName(node.getName()).build();
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA5021x21582 Symbol cannot be added to current scope, since no scope exists.");
  }
  // symbol -> ast
  symbol.setAstNode(node);

  // ast -> symbol
  node.setSymbol(symbol);
  node.setEnclosingScope(symbol.getEnclosingScope());

  initGQLTypeHP1(node.getSymbol());

}

    /* generated by template core.Method*/
 public  void endVisit (graphqllite._ast.ASTScalar node)

 {
      /* generated by template _symboltable.scopesgenitor.EndVisitSymbol*/

  if(node.isPresentSymbol()){
    initGQLTypeHP2(node.getSymbol());
  }
}

    /* generated by template core.Method*/
 protected  void initSchemaHP1 (graphqllite._symboltable.SchemaSymbol symbol)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initSchemaHP2 (graphqllite._symboltable.SchemaSymbol symbol)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initTypeHP1 (graphqllite._symboltable.TypeSymbol symbol)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initTypeHP2 (graphqllite._symboltable.TypeSymbol symbol)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initGQLTypeHP1 (graphqllite._symboltable.GQLTypeSymbol symbol)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initGQLTypeHP2 (graphqllite._symboltable.GQLTypeSymbol symbol)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 public  void visit (graphqllite._ast.ASTGQLTypeAttribute node)

 {
      /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (graphqllite._ast.ASTSimpleAttributeType node)

 {
      /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (graphqllite._ast.ASTCollectionAttributeType node)

 {
      /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 protected  void initScopeHP1 (graphqllite._symboltable.IGraphQLLiteScope scope)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initScopeHP2 (graphqllite._symboltable.IGraphQLLiteScope scope)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initArtifactScopeHP1 (graphqllite._symboltable.IGraphQLLiteArtifactScope scope)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initArtifactScopeHP2 (graphqllite._symboltable.IGraphQLLiteArtifactScope scope)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 public  void addToScopeStack (graphqllite._symboltable.IGraphQLLiteScope scope)

 {
      scopeStack.addLast(scope);
}

}
