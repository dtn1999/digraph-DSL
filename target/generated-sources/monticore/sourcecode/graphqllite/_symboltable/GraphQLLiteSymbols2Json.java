/* generated from model GraphQLLite */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package graphqllite._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class GraphQLLiteSymbols2Json  implements graphqllite._visitor.GraphQLLiteVisitor2 {

    /* generated by template core.Attribute*/
 protected  de.monticore.symboltable.serialization.IDeSer scopeDeSer ;

    /* generated by template core.Attribute*/
 protected  graphqllite._symboltable.SchemaSymbolDeSer schemaSymbolDeSer ;

    /* generated by template core.Attribute*/
 protected  graphqllite._symboltable.TypeSymbolDeSer typeSymbolDeSer ;

    /* generated by template core.Attribute*/
 protected  graphqllite._symboltable.GQLTypeSymbolDeSer gQLTypeSymbolDeSer ;

    /* generated by template core.Attribute*/
 protected  de.monticore.symboltable.serialization.JsonPrinter printer ;

    /* generated by template core.Attribute*/
 protected  graphqllite._visitor.GraphQLLiteTraverser traverser ;


    /* generated by template core.Constructor*/
 public  GraphQLLiteSymbols2Json()
 {
  this(graphqllite.GraphQLLiteMill.traverser(), new de.monticore.symboltable.serialization.JsonPrinter());
traverser.add4GraphQLLite(this);
traverser.add4MCCommonLiterals(new de.monticore.literals.mccommonliterals._symboltable.MCCommonLiteralsSymbols2Json(getTraverser(), getJsonPrinter()));
traverser.add4MCBasics(new de.monticore.mcbasics._symboltable.MCBasicsSymbols2Json(getTraverser(), getJsonPrinter()));
traverser.add4MCLiteralsBasis(new de.monticore.literals.mcliteralsbasis._symboltable.MCLiteralsBasisSymbols2Json(getTraverser(), getJsonPrinter()));

}

    /* generated by template core.Constructor*/
 public  GraphQLLiteSymbols2Json(graphqllite._visitor.GraphQLLiteTraverser traverser,de.monticore.symboltable.serialization.JsonPrinter printer)
 {
  this.printer = printer;
this.traverser = traverser;
init();
}


    /* generated by template core.Method*/
 public  de.monticore.symboltable.serialization.JsonPrinter getJsonPrinter ()

 {
      return this.printer;
}

    /* generated by template core.Method*/
 public  void setJsonPrinter (de.monticore.symboltable.serialization.JsonPrinter printer)

 {
      this.printer=printer;
}

    /* generated by template core.Method*/
 public  String serialize (graphqllite._symboltable.IGraphQLLiteScope toSerialize)

 {
      /* generated by template _symboltable.serialization.symbols2Json.Serialize4Symbols2Json*/
this.getJsonPrinter().clearBuffer();
toSerialize.accept(this.getTraverser());
String serialized = this.getJsonPrinter().getContent();
return serialized;

}

    /* generated by template core.Method*/
 public  String serialize (graphqllite._symboltable.IGraphQLLiteArtifactScope toSerialize)

 {
      /* generated by template _symboltable.serialization.symbols2Json.Serialize4Symbols2Json*/
this.getJsonPrinter().clearBuffer();
toSerialize.accept(this.getTraverser());
String serialized = this.getJsonPrinter().getContent();
return serialized;

}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteArtifactScope deserialize (String serialized)

 {
      /* generated by template _symboltable.serialization.symbols2Json.Deserialize*/

de.monticore.symboltable.serialization.json.JsonObject scope =
  de.monticore.symboltable.serialization.JsonParser.parseJsonObject(serialized);
return (graphqllite._symboltable.IGraphQLLiteArtifactScope) scopeDeSer.deserializeArtifactScope(scope);

}

    /* generated by template core.Method*/
 public  graphqllite._visitor.GraphQLLiteTraverser getTraverser ()

 {
      /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template core.Method*/
 public  void setTraverser (graphqllite._visitor.GraphQLLiteTraverser traverser)

 {
      /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template core.Method*/
 public  void init ()

 {
      /* generated by template _symboltable.serialization.symbols2Json.Init*/

  graphqllite._symboltable.IGraphQLLiteGlobalScope gs = graphqllite.GraphQLLiteMill.globalScope();
  scopeDeSer = gs.getDeSer();
  gQLTypeSymbolDeSer = (graphqllite._symboltable.GQLTypeSymbolDeSer) gs.getSymbolDeSer("graphqllite._symboltable.GQLTypeSymbol");
  typeSymbolDeSer = (graphqllite._symboltable.TypeSymbolDeSer) gs.getSymbolDeSer("graphqllite._symboltable.TypeSymbol");
  schemaSymbolDeSer = (graphqllite._symboltable.SchemaSymbolDeSer) gs.getSymbolDeSer("graphqllite._symboltable.SchemaSymbol");

}

    /* generated by template core.Method*/
 public  String getSerializedString ()

 {
      return getJsonPrinter().getContent();
}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteArtifactScope load (java.net.URL url)

 {
      /* generated by template _symboltable.serialization.symbols2Json.Load2*/

//1. load content of file at given location as String
String serialized = de.monticore.io.FileReaderWriter.readFromFile(url);

//2. deserialize String to an artifact scope and add to enclosing scope
return this.deserialize(serialized);
}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteArtifactScope load (java.io.Reader reader)

 {
      /* generated by template _symboltable.serialization.symbols2Json.Load2*/

//1. load content of file at given location as String
String serialized = de.monticore.io.FileReaderWriter.readFromFile(reader);

//2. deserialize String to an artifact scope and add to enclosing scope
return this.deserialize(serialized);
}

    /* generated by template core.Method*/
 public  graphqllite._symboltable.IGraphQLLiteArtifactScope load (String model)

 {
      /* generated by template _symboltable.serialization.symbols2Json.Load2*/

//1. load content of file at given location as String
String serialized = de.monticore.io.FileReaderWriter.readFromFile(java.nio.file.Paths.get(model));

//2. deserialize String to an artifact scope and add to enclosing scope
return this.deserialize(serialized);
}

    /* generated by template core.Method*/
 public  String store (graphqllite._symboltable.IGraphQLLiteArtifactScope scope,String fileName)

 {
      /* generated by template _symboltable.serialization.symbols2Json.Store*/

  getJsonPrinter().clearBuffer();
  scope.accept(getTraverser());
  String serialized = getJsonPrinter().getContent();
  de.monticore.io.FileReaderWriter.storeInFile(java.nio.file.Paths.get(fileName), serialized);
  return serialized;

}

    /* generated by template core.Method*/
 public  void visit (graphqllite._symboltable.IGraphQLLiteScope node)

 {
      /* generated by template _symboltable.serialization.symbols2Json.VisitScope4STP*/

  if(getJsonPrinter().toString().isEmpty()){
    getJsonPrinter().beginObject();
  } else{
    getJsonPrinter().beginObject(de.monticore.symboltable.serialization.JsonDeSers.SPANNED_SCOPE);
  }
  scopeDeSer.serialize((de.monticore.symboltable.IScope) node, (GraphQLLiteSymbols2Json) this);
  getJsonPrinter().beginArray(de.monticore.symboltable.serialization.JsonDeSers.SYMBOLS);


}

    /* generated by template core.Method*/
 public  void endVisit (graphqllite._symboltable.IGraphQLLiteScope node)

 {
      /* generated by template _symboltable.serialization.symbols2Json.EndVisit4Scope*/

  getJsonPrinter().endArray();
  scopeDeSer.serializeAddons((de.monticore.symboltable.IScope) node, (GraphQLLiteSymbols2Json) this);
  getJsonPrinter().endObject();


}

    /* generated by template core.Method*/
 public  void visit (graphqllite._symboltable.SchemaSymbol node)

 {
      /* generated by template _symboltable.serialization.symbols2Json.VisitSymbol*/

  schemaSymbolDeSer.serialize(node, (GraphQLLiteSymbols2Json) this);
}

    /* generated by template core.Method*/
 public  void visit (graphqllite._symboltable.TypeSymbol node)

 {
      /* generated by template _symboltable.serialization.symbols2Json.VisitSymbol*/

  typeSymbolDeSer.serialize(node, (GraphQLLiteSymbols2Json) this);
}

    /* generated by template core.Method*/
 public  void visit (graphqllite._symboltable.GQLTypeSymbol node)

 {
      /* generated by template _symboltable.serialization.symbols2Json.VisitSymbol*/

  gQLTypeSymbolDeSer.serialize(node, (GraphQLLiteSymbols2Json) this);
}

    /* generated by template core.Method*/
 public  void visit (graphqllite._symboltable.IGraphQLLiteArtifactScope node)

 {
      /* generated by template _symboltable.serialization.symbols2Json.VisitArtifactScope*/

  getJsonPrinter().beginObject();
  scopeDeSer.serialize((de.monticore.symboltable.IArtifactScope) node, (GraphQLLiteSymbols2Json) this);
  getJsonPrinter().beginArray(de.monticore.symboltable.serialization.JsonDeSers.SYMBOLS);


}

    /* generated by template core.Method*/
 public  void endVisit (graphqllite._symboltable.IGraphQLLiteArtifactScope node)

 {
      /* generated by template _symboltable.serialization.symbols2Json.EndVisit4Scope*/

  getJsonPrinter().endArray();
  scopeDeSer.serializeAddons((de.monticore.symboltable.IArtifactScope) node, (GraphQLLiteSymbols2Json) this);
  getJsonPrinter().endObject();


}

}
