/* generated from model GraphQLLite */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package graphqllite._visitor;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;

/* generated by template core.Annotations*/
// empty template: no Annotation

 public  interface GraphQLLiteHandler extends de.monticore.visitor.IHandler  { 


  default /* generated by template core.Method*/
 public  graphqllite._visitor.GraphQLLiteTraverser getTraverser ()

 {
          throw new UnsupportedOperationException("0xA7015x08166 The getter for the traverser is not implemented. You might want to implement a wrapper class to allow setting/getting the traverser.");

}

  default /* generated by template core.Method*/
 public  void setTraverser (graphqllite._visitor.GraphQLLiteTraverser traverser)

 {
          throw new UnsupportedOperationException("0xA7016x39379 The setter for the traverser is not implemented. You might want to implement a wrapper class to allow setting/getting the traverser.");

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTSchema node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._ast.ASTSchema node)

 {
      /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<graphqllite._ast.ASTGQLType> iter_gQLTypes = node.getGQLTypeList().iterator();
      while (iter_gQLTypes.hasNext()) {
        iter_gQLTypes.next().accept(getTraverser());
      }
    }

    // although we generally assume that the symbol table is always available,
    // there are cases, where this is not true (for example construction of the
    // symbol table itself. Thus, the null-check is necessary.
    if (node.getSpannedScope() != null) {
      node.getSpannedScope().accept(getTraverser());
    }

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTScalar node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._ast.ASTScalar node)

 {
      /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.




}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTType node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._ast.ASTType node)

 {
      /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<graphqllite._ast.ASTGQLTypeAttribute> iter_attributes = node.getAttributesList().iterator();
      while (iter_attributes.hasNext()) {
        iter_attributes.next().accept(getTraverser());
      }
    }

    // although we generally assume that the symbol table is always available,
    // there are cases, where this is not true (for example construction of the
    // symbol table itself. Thus, the null-check is necessary.
    if (node.getSpannedScope() != null) {
      node.getSpannedScope().accept(getTraverser());
    }

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTGQLTypeAttribute node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._ast.ASTGQLTypeAttribute node)

 {
      /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getType()) {
        node.getType().accept(getTraverser());
      }


}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTSimpleAttributeType node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._ast.ASTSimpleAttributeType node)

 {
      /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.




}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTCollectionAttributeType node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._ast.ASTCollectionAttributeType node)

 {
      /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getSimpleAttributeType()) {
        node.getSimpleAttributeType().accept(getTraverser());
      }


}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTGQLType node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTAttributeType node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTGraphQLLiteNode node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTBUILDINSCALAR node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.SchemaSymbol node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._symboltable.SchemaSymbol node)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.TypeSymbol node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._symboltable.TypeSymbol node)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.GQLTypeSymbol node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._symboltable.GQLTypeSymbol node)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.ICommonGraphQLLiteSymbol node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._symboltable.ICommonGraphQLLiteSymbol node)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.IGraphQLLiteScope node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._symboltable.IGraphQLLiteScope node)

 {
      /* generated by template _visitor.handler.TraverseScope*/

  // traverse symbols within the scope
  for (graphqllite._symboltable.SchemaSymbol s : node.getLocalSchemaSymbols()) {
    s.accept(getTraverser());
  }
  for (graphqllite._symboltable.TypeSymbol s : node.getLocalTypeSymbols()) {
    s.accept(getTraverser());
  }
  for (graphqllite._symboltable.GQLTypeSymbol s : node.getLocalGQLTypeSymbols()) {
    s.accept(getTraverser());
  }

}

  default /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.IGraphQLLiteArtifactScope node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (graphqllite._symboltable.IGraphQLLiteArtifactScope node)

 {
      traverse((graphqllite._symboltable.IGraphQLLiteScope) node);
}

}
