/* generated from model GraphQLLite */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package graphqllite._visitor;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class GraphQLLiteInheritanceHandler  implements graphqllite._visitor.GraphQLLiteHandler {

    /* generated by template core.Attribute*/
 protected  graphqllite._visitor.GraphQLLiteTraverser traverser ;



    /* generated by template core.Method*/
 public  graphqllite._visitor.GraphQLLiteTraverser getTraverser ()

 {
      /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template core.Method*/
 public  void setTraverser (graphqllite._visitor.GraphQLLiteTraverser traverser)

 {
      /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTSchema node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((graphqllite._ast.ASTGraphQLLiteNode) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTScalar node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().visit((graphqllite._ast.ASTGQLType) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._ast.ASTGQLType) node);
  getTraverser().endVisit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTType node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().visit((graphqllite._ast.ASTGQLType) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._ast.ASTGQLType) node);
  getTraverser().endVisit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTGQLTypeAttribute node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((graphqllite._ast.ASTGraphQLLiteNode) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTSimpleAttributeType node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().visit((graphqllite._ast.ASTAttributeType) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._ast.ASTAttributeType) node);
  getTraverser().endVisit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTCollectionAttributeType node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().visit((graphqllite._ast.ASTAttributeType) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._ast.ASTAttributeType) node);
  getTraverser().endVisit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTGQLType node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((graphqllite._ast.ASTGraphQLLiteNode) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTAttributeType node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((graphqllite._ast.ASTGraphQLLiteNode) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTGraphQLLiteNode node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((graphqllite._ast.ASTGraphQLLiteNode) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._ast.ASTGraphQLLiteNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.IGraphQLLiteScope node)

 {
      /* generated by template _visitor.handler.HandleSymTabInheritance*/

  getTraverser().visit((de.monticore.symboltable.IScope) node);
  getTraverser().visit((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  getTraverser().visit((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  getTraverser().visit((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  getTraverser().endVisit((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  getTraverser().endVisit((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  getTraverser().endVisit((de.monticore.symboltable.IScope) node);

}

    /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.IGraphQLLiteArtifactScope node)

 {
      /* generated by template _visitor.handler.HandleSymTabInheritance*/

  getTraverser().visit((de.monticore.symboltable.IScope) node);
  getTraverser().visit((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  getTraverser().visit((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  getTraverser().visit((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  getTraverser().visit((graphqllite._symboltable.IGraphQLLiteScope) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._symboltable.IGraphQLLiteScope) node);
  getTraverser().endVisit((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  getTraverser().endVisit((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  getTraverser().endVisit((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  getTraverser().endVisit((de.monticore.symboltable.IScope) node);

}

    /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.SchemaSymbol node)

 {
      /* generated by template _visitor.handler.HandleSymTabInheritance*/

  getTraverser().visit((de.monticore.symboltable.ISymbol) node);
  getTraverser().visit((de.monticore.symboltable.IScopeSpanningSymbol) node);
  getTraverser().visit((graphqllite._symboltable.ICommonGraphQLLiteSymbol) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._symboltable.ICommonGraphQLLiteSymbol) node);
  getTraverser().endVisit((de.monticore.symboltable.IScopeSpanningSymbol) node);
  getTraverser().endVisit((de.monticore.symboltable.ISymbol) node);

}

    /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.TypeSymbol node)

 {
      /* generated by template _visitor.handler.HandleSymTabInheritance*/

  getTraverser().visit((de.monticore.symboltable.ISymbol) node);
  getTraverser().visit((de.monticore.symboltable.IScopeSpanningSymbol) node);
  getTraverser().visit((graphqllite._symboltable.ICommonGraphQLLiteSymbol) node);
  getTraverser().visit((graphqllite._symboltable.GQLTypeSymbol) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._symboltable.GQLTypeSymbol) node);
  getTraverser().endVisit((graphqllite._symboltable.ICommonGraphQLLiteSymbol) node);
  getTraverser().endVisit((de.monticore.symboltable.IScopeSpanningSymbol) node);
  getTraverser().endVisit((de.monticore.symboltable.ISymbol) node);

}

    /* generated by template core.Method*/
 public  void handle (graphqllite._symboltable.GQLTypeSymbol node)

 {
      /* generated by template _visitor.handler.HandleSymTabInheritance*/

  getTraverser().visit((de.monticore.symboltable.ISymbol) node);
  getTraverser().visit((graphqllite._symboltable.ICommonGraphQLLiteSymbol) node);
  GraphQLLiteHandler.super.handle(node);
  getTraverser().endVisit((graphqllite._symboltable.ICommonGraphQLLiteSymbol) node);
  getTraverser().endVisit((de.monticore.symboltable.ISymbol) node);

}

}
