/* generated from model GraphQLLite */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package graphqllite._od;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;

/* generated by template core.Annotations*/
// empty template: no Annotation

 public  class GraphQLLite2OD  implements graphqllite._visitor.GraphQLLiteVisitor2,graphqllite._visitor.GraphQLLiteHandler {

    /* generated by template core.Attribute*/
 protected  graphqllite._visitor.GraphQLLiteTraverser traverser ;

    /* generated by template core.Attribute*/
 protected  de.monticore.prettyprint.IndentPrinter pp ;

    /* generated by template core.Attribute*/
 protected  de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting ;

    /* generated by template core.Attribute*/
 protected  boolean printEmptyOptional = false;;

    /* generated by template core.Attribute*/
 protected  boolean printEmptyList = false;;


    /* generated by template core.Constructor*/
 public  GraphQLLite2OD(de.monticore.prettyprint.IndentPrinter printer,de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting)
 {
  /* generated by template _od.ConstructorOD*/
  this.reporting = reporting;
  this.pp = printer;
}


    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTSchema node)

 {
      /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "graphqllite._ast.ASTSchema");
  pp.indent();
  if (node.isPresentSymbol()) {
    String symName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol()));
    pp.println("symbol = " + symName + ";");
  } else if (printEmptyOptional) {
    pp.println("symbol = absent;");
  }
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  String spannedScopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope()));
  pp.println("spanningScope = " + spannedScopeName + ";");
  printAttribute("name", String.valueOf(node.getName()));
  {
    Iterator<graphqllite._ast.ASTGQLType> iter_gQLTypes = node.getGQLTypeList().iterator();
    boolean isEmpty = true;
    if (iter_gQLTypes.hasNext()) {
      pp.print("gQLTypes");
      pp.print(" = [");
      pp.println("// *size: " + node.getGQLTypeList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("gQLTypes");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_gQLTypes.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_gQLTypes.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTScalar node)

 {
      /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "graphqllite._ast.ASTScalar");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  printAttribute("name", String.valueOf(node.getName()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTType node)

 {
      /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "graphqllite._ast.ASTType");
  pp.indent();
  if (node.isPresentSymbol()) {
    String symName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol()));
    pp.println("symbol = " + symName + ";");
  } else if (printEmptyOptional) {
    pp.println("symbol = absent;");
  }
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  String spannedScopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope()));
  pp.println("spanningScope = " + spannedScopeName + ";");
  {
    Iterator<graphqllite._ast.ASTGQLTypeAttribute> iter_attributes = node.getAttributesList().iterator();
    boolean isEmpty = true;
    if (iter_attributes.hasNext()) {
      pp.print("attributes");
      pp.print(" = [");
      pp.println("// *size: " + node.getAttributesList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("attributes");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_attributes.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_attributes.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  printAttribute("name", String.valueOf(node.getName()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTGQLTypeAttribute node)

 {
      /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "graphqllite._ast.ASTGQLTypeAttribute");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  printAttribute("attributeName", String.valueOf(node.getAttributeName()));
  if (null != node.getType()) {
    pp.print("type");
    pp.print(" = ");
    node.getType().accept(getTraverser());
    pp.println(";");
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTSimpleAttributeType node)

 {
      /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "graphqllite._ast.ASTSimpleAttributeType");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (node.isPresentType()) {
    printAttribute("type", "\"" + String.valueOf(node.getType()) + "\"");
  } else if (printEmptyOptional) {
    pp.println("type = absent;");
  }
  if (node.isPresentBuildInScalar()) {
    printAttribute("buildInScalar", "\"" + String.valueOf(node.getBuildInScalar()) + "\"");
  } else if (printEmptyOptional) {
    pp.println("buildInScalar = absent;");
  }
  printAttribute("required", String.valueOf(node.isRequired()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template core.Method*/
 public  void handle (graphqllite._ast.ASTCollectionAttributeType node)

 {
      /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "graphqllite._ast.ASTCollectionAttributeType");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (null != node.getSimpleAttributeType()) {
    pp.print("simpleAttributeType");
    pp.print(" = ");
    node.getSimpleAttributeType().accept(getTraverser());
    pp.println(";");
  }
  printAttribute("required", String.valueOf(node.isRequired()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template core.Method*/
 public  graphqllite._visitor.GraphQLLiteTraverser getTraverser ()

 {
      /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template core.Method*/
 public  void setTraverser (graphqllite._visitor.GraphQLLiteTraverser traverser)

 {
      /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template core.Method*/
 protected  void printAttribute (String name,String value)

 {
      /* generated by template _od.PrintAttribute*/
  pp.print(name);
  pp.print(" = ");
  pp.print(value);
  pp.println(";");
}

    /* generated by template core.Method*/
 protected  void printObject (String objName,String objType)

 {
      /* generated by template _od.PrintObject*/
pp.print(objName);
pp.print(":");
pp.print(de.se_rwth.commons.Names.getSimpleName(objType));
pp.println(" {");
}

    /* generated by template core.Method*/
 public  String printObjectDiagram (String modelName,graphqllite._ast.ASTGraphQLLiteNode node)

 {
      /* generated by template _od.PrintObjectDiagram*/
  pp.clearBuffer();
  pp.setIndentLength(2);
  pp.print("objectdiagram ");
  pp.print(modelName);
  pp.println(" {");
  pp.indent();
  node.accept(getTraverser());
  pp.print(";");
  pp.unindent();
  pp.println("}");
  return pp.getContent();
}

    /* generated by template core.Method*/
 public  boolean isPrintEmptyOptional ()

 {
      /* generated by template methods.Get*/

return this.printEmptyOptional;

}

    /* generated by template core.Method*/
 public  void setPrintEmptyOptional (boolean printEmptyOptional)

 {
      /* generated by template methods.Set*/

this.printEmptyOptional = printEmptyOptional;

}

    /* generated by template core.Method*/
 public  boolean isPrintEmptyList ()

 {
      /* generated by template methods.Get*/

return this.printEmptyList;

}

    /* generated by template core.Method*/
 public  void setPrintEmptyList (boolean printEmptyList)

 {
      /* generated by template methods.Set*/

this.printEmptyList = printEmptyList;

}

}
